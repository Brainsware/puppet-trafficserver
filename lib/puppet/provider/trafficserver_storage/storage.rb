#   Copyright 2014 Brainsware
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# abstract base class for trafficserver_storage

require 'puppetx/filemapper'

Puppet::Type.type(:trafficserver_storage).provide(:storage) do

  include PuppetX::FileMapper

  Default_target = '/etc/trafficserver/storage.config'
  Blank      = /^\s*$/
  Comment    = /^\s*#/
  Line_match =  %r{
      ^[ \t]*  # optional starting space, this is important of the repetition matcher below
      (.+?)    # match the whole bloody line, and we'll take it apart later.
      [ \t]*$  # optional: trailing spaces
    }x

  def select_file
    Default_target
  end

  def self.target_files
    [ Default_target ]
  end

  # apparently filemapper's autogenerated prefetch method isn't smart enough to
  # fill namevar attributes that are not "name".
  # As such, we override the getter for path here.
  def path
    return @property_hash[:path] if @resource.nil?
    return @resource[:path]
  end

  def self.parse_file(filename, file_contents)
    lines = file_contents.split("\n").delete_if { |l| l =~ Blank || l =~ Comment }
    lines.collect { |line| line.match(Line_match) }.compact.collect do |m|

      line_match    = m[1]
      conf, comment = line_match.split('#', 2) # max 2 pieces to catch # comments in # comments
      path, *size   = conf.split
      comment       = comment.strip unless comment.nil?

      # let's find out how to get group's default from the type :D
      # validate, that which cannot be sensibly validated in the type:
      raise Puppet::ParseError, "Invalid format: <path> [<size>]" if size.size > 1

      # init @property_hash, by returning a hash
      {
        :name     => path,
        :path     => path,
        :size     => size.first,
        :comment  => comment,
        # how do we set group/owner or type here?
      }
    end
  end

  def self.format_file(filename, providers)
    contents = []
    contents << Header
    contents << providers.collect do |provider|

      line  = "#{provider.path}"
      line += " #{provider.size}"      unless (provider.size.nil?    || provider.size    == :undef)
      line += " # #{provider.comment}" unless (provider.comment.nil? || provider.comment == :undef)

      # line += foo unless false returns nil, of course.
      # be more explicity:
      line
    end
    contents.join("\n") + "\n"
  end

  Header = <<-HEADER
#
# Storage Configuration file
#
#
# The storage configuration is a list of all the storage to
# be used by the cache.
#
#
#############################################################
# Using a file for the cache storage
#
# <pathname> <size>
#
# Where 'pathname' is full path to the directory where you want
# the cache-file to live and 'size' is size in bytes
#
# Example: 128MB cache file(/var/trafficserver/cache.db)
#      /var/trafficserver 128M
#
#############################################################
##              O_DIRECT Specific Configuration            ##
#############################################################
#
# Examples: Using O_DIRECT on disks (Linux kernel >= 2.6.3,
# FreeBSD > 5.3)
#
#      /dev/sdb             # Linux
#      /dev/ada1            # FreeBSD
#
#
# Note that when using these raw devices in O_DIRECT mode, you
# do not need to specify the partition size. It's automatically
# detected. For more examples and a complete documentation see
#
#   https://trafficserver.apache.org/docs/trunk/admin/configuration-files/storage.config
#
#
# A small default cache (256MB). This is set to allow for the regression test to succeed
# most likely you'll want to use a larger cache. And, we definitely recommend the use
# of raw devices for production caches.
HEADER

end
